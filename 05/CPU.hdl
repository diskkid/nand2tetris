// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    DRegister(in=din, out=dout, load=compute4);

    Not(in=instruction[15], out=notinst15);
    Or(a=compute5, b=notinst15, out=loada);
    ARegister(in=ain, out=aout, out[0..14]=addressM, load=loada);
    
    // Branch
    DMux16(in=instruction, sel=instruction[15], a[0..14]=addraddr,
           b[0]=compute0,
           b[1]=compute1,
           b[2]=compute2,
           b[3]=compute3,
           b[4]=compute4,
           b[5]=compute5,
           b[6]=compute6,
           b[7]=compute7,
           b[8]=compute8,
           b[9]=compute9,
           b[10]=compute10,
           b[11]=compute11,
           b[12]=compute12,
           b[13]=compute13,
           b[14]=compute14,
           b[15]=compute15);

    // Compute instruction
    Mux16(a=aout, b=inM, sel=compute12, out=aluyin);
    ALU(x=dout, y=aluyin,
        zx=compute11, nx=compute10,
        zy=compute9, ny=compute8,
        f=compute7, no=compute6,
        out=aluout, zr=zr, ng=ng);
    
    Mux16(a=false, b=aluout, sel=compute3, out=outM);
    Mux16(a=false, b=aluout, sel=compute4, out=din);
    Mux16(a=false, b=aluout, sel=compute5, out=compaddr);

    And(a=compute3, b=true, out=writeM);
    Or16(a[0..14]=addraddr, b=compaddr, out=ain);

    // PC
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And4Way(a=compute0, b=notzr, c=notng, d=true, out=j1);
    And4Way(a=compute1, b=zr, c=true, d=true, out=j2);
    And4Way(a=compute0, b=compute1, c=notng, d=true, out=j3);
    And4Way(a=compute2, b=ng, c=true, d=true, out=j4);
    And4Way(a=compute0, b=compute2, c=notzr, d=true, out=j5);
    And4Way(a=compute1, b=compute2, c=zr, d=true, out=j61);
    And4Way(a=compute1, b=compute2, c=ng, d=true, out=j62);
    Or(a=j61, b=j62, out=j6);
    And4Way(a=compute0, b=compute1, c=compute2, d=true, out=j7);
    Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, in[3]=j4, in[4]=j5, in[5]=j6, in[6]=j7, in[7]=false, out=jump);
    Not(in=jump, out=inc);

    PC(in=aout, inc=inc, load=jump, reset=reset, out[0..14]=pc);
}
